# Generated by Django 3.2.8 on 2022-03-09 05:26

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import roadmap.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='RoadMapContents',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=50, unique=True, verbose_name='内容')),
            ],
        ),
        migrations.CreateModel(
            name='RoadMapTitles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30, unique=True, verbose_name='タイトル')),
            ],
        ),
        migrations.CreateModel(
            name='UserClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userclass', models.CharField(max_length=30, null=True, unique=True, verbose_name='クラス')),
            ],
        ),
        migrations.CreateModel(
            name='RoadMapIndexes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.CharField(max_length=50, verbose_name='詳細')),
                ('index_title', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contenttitle', to='roadmap.roadmapcontents')),
            ],
        ),
        migrations.AddField(
            model_name='roadmapcontents',
            name='content_title',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roadmaptitle', to='roadmap.roadmaptitles'),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=20, verbose_name='名前')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='メールアドレス')),
                ('is_staff', models.BooleanField(default=False, verbose_name='スタッフ権限')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
                ('userclass', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='roadmap.userclass', to_field='userclass', verbose_name='クラス')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', roadmap.models.CustomUserManager()),
            ],
        ),
    ]
